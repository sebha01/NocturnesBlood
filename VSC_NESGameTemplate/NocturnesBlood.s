;
; File generated by cc65 v 2.19 - Git 5cb1bc6
;
	.fopt		compiler,"cc65 v 2.19 - Git 5cb1bc6"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_write
	.import		_delay
	.import		_get_pad_new
	.export		_Level1A
	.export		_Level2A
	.export		_Level3A
	.export		_palette
	.export		_spritePalette
	.export		_currentGameState
	.export		_text
	.export		_titlePrompt
	.export		_endScreenTitle
	.export		_endScreenPrompt
	.export		_deathScreenTitle
	.export		_inputPad
	.export		_movementPad
	.export		_i
	.export		_currentLevel
	.export		_currentLevelData
	.export		_player
	.export		_DrawTitleScreen
	.export		_GameLoop
	.export		_MovePlayer
	.export		_DrawPlayer
	.export		_GetTileIndex
	.export		_CheckIfEnd
	.export		_DrawEndScreen
	.export		_OnGround
	.export		_CheckIfCollidableTile
	.export		_CheckIfGoalTile
	.export		_UpdateColliderPositions
	.export		_DashEnd
	.export		_CheckIfPlatformTile
	.export		_SetPlayerValues
	.export		_DrawDeathScreen
	.export		_ResetLevel
	.export		_main

.segment	"DATA"

_currentGameState:
	.byte	$00
_i:
	.word	$0000
_currentLevel:
	.word	$0001

.segment	"RODATA"

_Level1A:
	.byte	$a2
	.byte	$a3
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$80
	.byte	$80
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$80
	.byte	$80
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$80
	.byte	$80
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$80
	.byte	$80
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$04
	.byte	$05
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$80
	.byte	$80
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$14
	.byte	$15
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$80
	.byte	$80
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$80
	.byte	$80
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$80
	.byte	$80
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$84
	.byte	$85
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$80
	.byte	$80
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$94
	.byte	$95
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$80
	.byte	$80
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$80
	.byte	$80
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a0
	.byte	$a1
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$80
	.byte	$80
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b0
	.byte	$b1
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$90
	.byte	$90
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$84
	.byte	$85
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$94
	.byte	$95
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$84
	.byte	$85
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$94
	.byte	$95
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$84
	.byte	$85
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$84
	.byte	$85
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$94
	.byte	$95
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$94
	.byte	$95
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$92
	.byte	$93
	.byte	$a2
	.byte	$a3
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$82
	.byte	$83
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$92
	.byte	$93
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b2
	.byte	$b3
	.byte	$a2
	.byte	$a3
	.byte	$b2
	.byte	$b3
	.byte	$80
	.byte	$a0
	.byte	$a0
	.byte	$80
	.byte	$a0
	.byte	$a0
	.byte	$a0
	.byte	$20
	.byte	$88
	.byte	$aa
	.byte	$aa
	.byte	$88
	.byte	$aa
	.byte	$aa
	.byte	$02
	.byte	$02
	.byte	$88
	.byte	$aa
	.byte	$aa
	.byte	$88
	.byte	$a2
	.byte	$aa
	.byte	$aa
	.byte	$22
	.byte	$88
	.byte	$a2
	.byte	$88
	.byte	$a8
	.byte	$2a
	.byte	$aa
	.byte	$aa
	.byte	$22
	.byte	$08
	.byte	$aa
	.byte	$88
	.byte	$aa
	.byte	$aa
	.byte	$2a
	.byte	$aa
	.byte	$22
	.byte	$88
	.byte	$2a
	.byte	$88
	.byte	$aa
	.byte	$aa
	.byte	$aa
	.byte	$aa
	.byte	$02
	.byte	$88
	.byte	$aa
	.byte	$88
	.byte	$aa
	.byte	$aa
	.byte	$aa
	.byte	$aa
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$0a
	.byte	$0a
	.byte	$02
	.byte	$08
	.byte	$02
_Level2A:
	.byte	$a8
	.byte	$a9
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$aa
	.byte	$ab
	.byte	$aa
	.byte	$ab
	.byte	$aa
	.byte	$ab
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$10
	.byte	$11
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b6
	.byte	$b7
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$aa
	.byte	$ab
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$e4
	.byte	$e5
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$f4
	.byte	$f5
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$d8
	.byte	$d9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$10
	.byte	$11
	.byte	$e5
	.byte	$e6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b6
	.byte	$b7
	.byte	$f5
	.byte	$f6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$a4
	.byte	$a5
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$15
	.byte	$b4
	.byte	$b5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b6
	.byte	$b7
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$b6
	.byte	$b7
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$8b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$e4
	.byte	$e5
	.byte	$e5
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$9b
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$db
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$f4
	.byte	$f5
	.byte	$f5
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$e4
	.byte	$e5
	.byte	$e6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$f4
	.byte	$f5
	.byte	$f6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$e4
	.byte	$e5
	.byte	$e6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$f4
	.byte	$f5
	.byte	$f6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$a8
	.byte	$a9
	.byte	$10
	.byte	$11
	.byte	$ca
	.byte	$cb
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$ca
	.byte	$8a
	.byte	$a4
	.byte	$a5
	.byte	$b8
	.byte	$b9
	.byte	$13
	.byte	$13
	.byte	$da
	.byte	$db
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$da
	.byte	$9a
	.byte	$b4
	.byte	$b5
	.byte	$55
	.byte	$f5
	.byte	$75
	.byte	$55
	.byte	$f5
	.byte	$f5
	.byte	$f5
	.byte	$75
	.byte	$55
	.byte	$ff
	.byte	$7f
	.byte	$5f
	.byte	$ff
	.byte	$ff
	.byte	$ff
	.byte	$55
	.byte	$55
	.byte	$ff
	.byte	$77
	.byte	$55
	.byte	$f7
	.byte	$d5
	.byte	$ff
	.byte	$57
	.byte	$55
	.byte	$ff
	.byte	$ff
	.byte	$55
	.byte	$7f
	.byte	$5d
	.byte	$ff
	.byte	$77
	.byte	$55
	.byte	$ff
	.byte	$57
	.byte	$d5
	.byte	$f7
	.byte	$fd
	.byte	$ff
	.byte	$57
	.byte	$d5
	.byte	$f5
	.byte	$fd
	.byte	$fd
	.byte	$ff
	.byte	$ff
	.byte	$f7
	.byte	$55
	.byte	$dd
	.byte	$ff
	.byte	$ff
	.byte	$5f
	.byte	$ff
	.byte	$f7
	.byte	$fd
	.byte	$55
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
_Level3A:
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$a6
	.byte	$a7
	.byte	$b4
	.byte	$b5
	.byte	$b4
	.byte	$b4
	.byte	$b4
	.byte	$b5
	.byte	$b4
	.byte	$b9
	.byte	$b4
	.byte	$b5
	.byte	$b4
	.byte	$b5
	.byte	$b4
	.byte	$b5
	.byte	$b4
	.byte	$b9
	.byte	$b4
	.byte	$b8
	.byte	$b9
	.byte	$b5
	.byte	$b4
	.byte	$b5
	.byte	$b8
	.byte	$b9
	.byte	$b4
	.byte	$b5
	.byte	$b4
	.byte	$b5
	.byte	$b4
	.byte	$b9
	.byte	$b4
	.byte	$b5
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$84
	.byte	$85
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$84
	.byte	$85
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$95
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$94
	.byte	$95
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$10
	.byte	$11
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$a3
	.byte	$a2
	.byte	$b6
	.byte	$b7
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$b2
	.byte	$b3
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$a0
	.byte	$a1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$b0
	.byte	$b1
	.byte	$7f
	.byte	$5f
	.byte	$5f
	.byte	$5f
	.byte	$5f
	.byte	$5f
	.byte	$5f
	.byte	$5f
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$f5
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$f5
	.byte	$f5
	.byte	$55
	.byte	$55
	.byte	$77
	.byte	$f5
	.byte	$f5
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$f5
	.byte	$f5
	.byte	$55
	.byte	$d5
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$0f
	.byte	$0f
	.byte	$0f
	.byte	$0f
	.byte	$0f
	.byte	$0f
	.byte	$0f
	.byte	$0f
_palette:
	.byte	$0f
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0f
	.byte	$01
	.byte	$11
	.byte	$31
	.byte	$0f
	.byte	$05
	.byte	$16
	.byte	$27
	.byte	$0f
	.byte	$09
	.byte	$19
	.byte	$29
_spritePalette:
	.byte	$0f
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0f
	.byte	$01
	.byte	$11
	.byte	$21
	.byte	$0f
	.byte	$05
	.byte	$16
	.byte	$36
	.byte	$0f
	.byte	$09
	.byte	$19
	.byte	$39
_text:
	.byte	$44,$45,$41,$54,$48,$20,$48,$4F,$4C,$45,$53,$00
_titlePrompt:
	.byte	$50,$72,$65,$73,$73,$20,$53,$54,$41,$52,$54,$00
_endScreenTitle:
	.byte	$59,$4F,$55,$20,$57,$4F,$4E,$21,$21,$21,$00
_endScreenPrompt:
	.byte	$54,$6F,$20,$70,$6C,$61,$79,$20,$61,$67,$61,$69,$6E,$00
_deathScreenTitle:
	.byte	$59,$4F,$55,$20,$41,$52,$45,$20,$44,$45,$41,$44,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_inputPad:
	.res	1,$00
_movementPad:
	.res	1,$00
_currentLevelData:
	.res	2,$00
_player:
	.res	25,$00

; ---------------------------------------------------------------
; void __near__ DrawTitleScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawTitleScreen: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0x00, 1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; vram_adr(NTADR_A(8, 8)); // places text at screen position
;
	ldx     #$21
	lda     #$08
	jsr     _vram_adr
;
; vram_write(text, sizeof(text) - 1); //write Title to screen
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$0B
	jsr     _vram_write
;
; vram_adr(NTADR_A(10, 14));
;
	ldx     #$21
	lda     #$CA
	jsr     _vram_adr
;
; vram_write(titlePrompt, sizeof(titlePrompt) - 1);
;
	lda     #<(_titlePrompt)
	ldx     #>(_titlePrompt)
	jsr     pushax
	ldx     #$00
	lda     #$0B
	jsr     _vram_write
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ GameLoop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GameLoop: near

.segment	"CODE"

;
; ppu_off(); 
;
	jsr     _ppu_off
;
; switch(currentLevel)
;
	lda     _currentLevel
	ldx     _currentLevel+1
;
; }
;
	cpx     #$00
	bne     L0003
	cmp     #$01
	beq     L0004
	cmp     #$02
	beq     L0005
	cmp     #$03
	beq     L0006
	jmp     L0003
;
; currentLevelData = Level1A;
;
L0004:	lda     #>(_Level1A)
	sta     _currentLevelData+1
	lda     #<(_Level1A)
;
; break;
;
	jmp     L0007
;
; currentLevelData = Level2A;
;
L0005:	lda     #>(_Level2A)
	sta     _currentLevelData+1
	lda     #<(_Level2A)
;
; break;
;
	jmp     L0007
;
; currentLevelData = Level3A;
;
L0006:	lda     #>(_Level3A)
	sta     _currentLevelData+1
	lda     #<(_Level3A)
L0007:	sta     _currentLevelData
;
; vram_adr(NAMETABLE_A);
;
L0003:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(0x00, 1024);
;
	jsr     push0
	ldx     #$04
	jsr     _vram_write
;
; delay(60);
;
	lda     #$3C
	jsr     _delay
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(currentLevelData, 1024);
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; player.health = MAX_HEALTH;
;
	ldx     #$00
	lda     #$04
	sta     _player+23
	stx     _player+23+1
;
; pal_bg(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr((const char*)spritePalette);
;
	lda     #<(_spritePalette)
	ldx     #>(_spritePalette)
	jsr     _pal_spr
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ MovePlayer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_MovePlayer: near

.segment	"CODE"

;
; if (OnGround()) 
;
	jsr     _OnGround
	tax
	beq     L0002
;
; player.coyoteTime = COYOTE_FRAMES;
;
	lda     #$0A
	sta     _player+2
;
; player.hasDashedInAir = 0;
;
	lda     #$00
	sta     _player+20
;
; else if (!OnGround() && player.coyoteTime > 0) 
;
	jmp     L004E
L0002:	jsr     _OnGround
	tax
	bne     L004E
	lda     _player+2
	beq     L004E
;
; player.coyoteTime--;
;
	dec     _player+2
;
; if (player.dashCooldown > 0) 
;
L004E:	lda     _player+19
	beq     L004F
;
; player.dashCooldown--;
;
	dec     _player+19
;
; if (movementPad & PAD_LEFT)
;
L004F:	lda     _movementPad
	and     #$02
	beq     L0050
;
; if (!CheckIfCollidableTile(currentLevelData[GetTileIndex(player.left, player.y + 1)]))
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+3
	jsr     pusha
	lda     _player+1
	clc
	adc     #$01
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	bne     L0050
;
; player.x -= PLAYER_SPEED;
;
	lda     _player
	sec
	sbc     #$02
	sta     _player
;
; player.facingRight = 0;
;
	stx     _player+11
;
; if (movementPad & PAD_RIGHT)
;
L0050:	lda     _movementPad
	and     #$01
	beq     L0051
;
; if (!CheckIfCollidableTile(currentLevelData[GetTileIndex(player.right, player.y + 1)]))
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+5
	jsr     pusha
	lda     _player+1
	clc
	adc     #$01
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	bne     L0051
;
; player.x += PLAYER_SPEED;
;
	lda     #$02
	clc
	adc     _player
	sta     _player
;
; player.facingRight = 1;
;
	lda     #$01
	sta     _player+11
;
; if ((inputPad & PAD_B) && !player.isDashing && !(player.dashCooldown > 0)) 
;
L0051:	lda     _inputPad
	and     #$40
	beq     L0058
	lda     _player+16
	ora     _player+16+1
	bne     L0058
	lda     _player+19
	bne     L0058
;
; if (OnGround() || !player.hasDashedInAir)
;
	jsr     _OnGround
	tax
	bne     L0055
	lda     _player+20
	bne     L0058
;
; player.dashDirection = (movementPad & PAD_LEFT ? -1 : movementPad & PAD_RIGHT ? 1 : 0);
;
L0055:	lda     _movementPad
	and     #$02
	beq     L0056
	ldx     #$FF
	txa
	jmp     L0019
L0056:	lda     _movementPad
	ldx     #$00
	and     #$01
	beq     L0019
	lda     #$01
L0019:	sta     _player+21
	stx     _player+21+1
;
; player.isDashing = 1;
;
	ldx     #$00
	lda     #$01
	sta     _player+16
	stx     _player+16+1
;
; player.dashTimer = DASH_DURATION;
;
	lda     #$06
	sta     _player+18
;
; if (!OnGround())
;
	jsr     _OnGround
	tax
	bne     L0058
;
; player.hasDashedInAir = 1;
;
	lda     #$01
	sta     _player+20
;
; if (inputPad & PAD_A && !player.isDashing) 
;
L0058:	lda     _inputPad
	and     #$80
	beq     L005C
	lda     _player+16
	ora     _player+16+1
	bne     L005C
;
; player.jumpBufferTimer = JUMP_BUFFER_FRAMES;
;
	lda     #$14
	sta     _player+15
;
; if (player.jumpBufferTimer > 0 && !player.isJumping && player.coyoteTime > 0) 
;
L005C:	lda     _player+15
	beq     L0060
	lda     _player+14
	bne     L0060
	lda     _player+2
	beq     L0060
;
; player.isJumping = 1;
;
	lda     #$01
	sta     _player+14
;
; player.velocityY = JUMP_VELOCITY;
;
	ldx     #$FF
	lda     #$F6
	sta     _player+12
	stx     _player+12+1
;
; player.jumpBufferTimer = 0;
;
	lda     #$00
	sta     _player+15
;
; else if (player.jumpBufferTimer > 0) 
;
	jmp     L0024
L0060:	lda     _player+15
	beq     L0024
;
; player.jumpBufferTimer--;
;
	dec     _player+15
;
; if (player.isDashing) 
;
L0024:	lda     _player+16
	ora     _player+16+1
	jeq     L0025
;
; player.dashTimer--;
;
	dec     _player+18
;
; for (i = 0; i < DASH_SPEED; i++) 
;
	lda     #$00
	sta     _i
	sta     _i+1
L0026:	lda     _i
	cmp     #$05
	lda     _i+1
	sbc     #$00
	bvc     L002A
	eor     #$80
L002A:	jpl     L0062
;
; int nextX = (player.dashDirection == 1) ? player.right + 2 : player.left - 2;
;
	lda     _player+21+1
	bne     L002D
	lda     _player+21
	cmp     #$01
	bne     L002D
	lda     _player+5
	ldx     _player+5+1
	clc
	adc     #$02
	bcc     L0030
	inx
	jmp     L0030
L002D:	lda     _player+3
	ldx     _player+3+1
	sec
	sbc     #$02
	bcs     L0030
	dex
L0030:	jsr     pushax
;
; if (!CheckIfCollidableTile(currentLevelData[GetTileIndex(nextX, player.top)]) &&
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	lda     _player+7
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	bne     L0031
;
; !CheckIfCollidableTile(currentLevelData[GetTileIndex(nextX, player.bottom)]))
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	lda     _player+9
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	bne     L0031
;
; player.x += player.dashDirection;
;
	lda     _player+21
	clc
	adc     _player
	sta     _player
;
; else 
;
	jmp     L0035
;
; DashEnd();
;
L0031:	jsr     _DashEnd
;
; break;
;
	jsr     incsp2
	jmp     L0062
;
; }
;
L0035:	jsr     incsp2
;
; for (i = 0; i < DASH_SPEED; i++) 
;
	inc     _i
	jne     L0026
	inc     _i+1
	jmp     L0026
;
; if (player.dashTimer <= 0) 
;
L0062:	lda     _player+18
	jne     L004A
;
; DashEnd();
;
	jsr     _DashEnd
;
; else 
;
	jmp     L004A
;
; if (player.isJumping) 
;
L0025:	lda     _player+14
	jeq     L0038
;
; player.velocityY += GRAVITY;
;
	inc     _player+12
	bne     L0039
	inc     _player+12+1
;
; if (player.velocityY < 0) 
;
L0039:	ldx     _player+12+1
	cpx     #$80
	bcc     L003B
;
; if (CheckIfCollidableTile(currentLevelData[GetTileIndex(player.left + 2, player.top)]) ||
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+3
	clc
	adc     #$02
	jsr     pusha
	lda     _player+7
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	bne     L003D
;
; CheckIfCollidableTile(currentLevelData[GetTileIndex(player.right - 2, player.top)]))
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+5
	sec
	sbc     #$02
	jsr     pusha
	lda     _player+7
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	beq     L003B
;
; player.velocityY = 0;
;
L003D:	lda     #$00
	sta     _player+12
	sta     _player+12+1
;
; player.y += 1;
;
	inc     _player+1
;
; if (player.velocityY > MAX_FALL_SPEED)
;
L003B:	lda     _player+12
	cmp     #$05
	lda     _player+12+1
	sbc     #$00
	bvs     L0041
	eor     #$80
L0041:	bpl     L0040
;
; player.velocityY = MAX_FALL_SPEED;
;
	ldx     #$00
	lda     #$04
	sta     _player+12
	stx     _player+12+1
;
; player.y += player.velocityY;
;
L0040:	lda     _player+12
	clc
	adc     _player+1
	sta     _player+1
;
; if (player.velocityY >= 0 && OnGround()) 
;
	ldx     _player+12+1
	bmi     L004A
	jsr     _OnGround
	tax
	bne     L0048
	jmp     L004A
;
; player.y -= 1;
;
L0046:	dec     _player+1
;
; UpdateColliderPositions();
;
	jsr     _UpdateColliderPositions
;
; while (OnGround()) 
;
L0048:	jsr     _OnGround
	tax
	bne     L0046
;
; player.y += 1;
;
	inc     _player+1
;
; UpdateColliderPositions();
;
	jsr     _UpdateColliderPositions
;
; player.velocityY = 0;
;
	lda     #$00
	sta     _player+12
	sta     _player+12+1
;
; player.isJumping = 0;
;
	sta     _player+14
;
; player.hasDashedInAir = 0;
;
	sta     _player+20
;
; else 
;
	jmp     L004A
;
; if (!OnGround()) 
;
L0038:	jsr     _OnGround
	tax
	bne     L004A
;
; player.isJumping = 1;
;
	lda     #$01
	sta     _player+14
;
; if (player.bottom > 240) 
;
L004A:	lda     _player+9
	cmp     #$F1
	lda     _player+9+1
	sbc     #$00
	bvs     L004C
	eor     #$80
L004C:	bpl     L004B
;
; ResetLevel();
;
	jmp     _ResetLevel
;
; }
;
L004B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawPlayer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawPlayer: near

.segment	"CODE"

;
; unsigned int offset = 20;
;
	lda     #$14
	jsr     pusha0
;
; unsigned int origin = 20;
;
	jsr     pusha0
;
; unsigned char healthBarAttributes = 0x02;
;
	lda     #$02
	jsr     pusha
;
; unsigned char playerAttributes =  player.isDashing ? 0x03 :
;
	lda     _player+16
	ora     _player+16+1
	beq     L0002
	lda     #$03
	jmp     L003C
;
; currentLevel == 3 ? 0X02 : 0x01;
;
L0002:	lda     _currentLevel+1
	bne     L003B
	lda     _currentLevel
	cmp     #$03
	bne     L003B
	lda     #$02
	jmp     L003C
L003B:	lda     #$01
L003C:	jsr     pusha
;
; if (!player.facingRight)
;
	lda     _player+11
	bne     L0007
;
; playerAttributes |= 0x40;
;
	tay
	lda     (sp),y
	ora     #$40
	sta     (sp),y
;
; oam_clear();
;
L0007:	jsr     _oam_clear
;
; if (currentGameState != GAME_LOOP)
;
	lda     _currentGameState
	cmp     #$01
;
; return;
;
	jne     L0026
;
; UpdateColliderPositions();
;
	jsr     _UpdateColliderPositions
;
; if (player.isDashing)
;
	lda     _player+16
	ora     _player+16+1
	jeq     L0009
;
; oam_spr((player.facingRight ? player.left : player.x), player.top, 0x88, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L000A
	lda     _player+3
	jmp     L000B
L000A:	lda     _player
L000B:	ldy     #$02
	sta     (sp),y
	lda     _player+7
	dey
	sta     (sp),y
	lda     #$88
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.x : player.left), player.top, 0x89, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L000C
	lda     _player
	jmp     L003D
L000C:	lda     _player+3
L003D:	ldy     #$02
	sta     (sp),y
	lda     _player+7
	dey
	sta     (sp),y
	lda     #$89
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.left : player.x), player.y, 0x98, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L000E
	lda     _player+3
	jmp     L000F
L000E:	lda     _player
L000F:	ldy     #$02
	sta     (sp),y
	lda     _player+1
	dey
	sta     (sp),y
	lda     #$98
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.x : player.left), player.y, 0x99, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L0010
	lda     _player
	jmp     L003E
L0010:	lda     _player+3
L003E:	ldy     #$02
	sta     (sp),y
	lda     _player+1
	dey
	sta     (sp),y
	lda     #$99
;
; else if (player.isJumping)
;
	jmp     L004B
L0009:	lda     _player+14
	jeq     L0013
;
; oam_spr((player.facingRight ? player.left : player.x), player.top, 0x0A, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L0014
	lda     _player+3
	jmp     L0015
L0014:	lda     _player
L0015:	ldy     #$02
	sta     (sp),y
	lda     _player+7
	dey
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.x : player.left), player.top, 0x0B, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L0016
	lda     _player
	jmp     L003F
L0016:	lda     _player+3
L003F:	ldy     #$02
	sta     (sp),y
	lda     _player+7
	dey
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.left : player.x), player.y, 0x1A, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L0018
	lda     _player+3
	jmp     L0019
L0018:	lda     _player
L0019:	ldy     #$02
	sta     (sp),y
	lda     _player+1
	dey
	sta     (sp),y
	lda     #$1A
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.x : player.left), player.y, 0x1B, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L001A
	lda     _player
	jmp     L0040
L001A:	lda     _player+3
L0040:	ldy     #$02
	sta     (sp),y
	lda     _player+1
	dey
	sta     (sp),y
	lda     #$1B
;
; else
;
	jmp     L004B
;
; oam_spr((player.facingRight ? player.left : player.x), player.top, 0x08, playerAttributes);
;
L0013:	jsr     decsp3
	lda     _player+11
	beq     L001D
	lda     _player+3
	jmp     L001E
L001D:	lda     _player
L001E:	ldy     #$02
	sta     (sp),y
	lda     _player+7
	dey
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.x : player.left), player.top, 0x09, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L001F
	lda     _player
	jmp     L0041
L001F:	lda     _player+3
L0041:	ldy     #$02
	sta     (sp),y
	lda     _player+7
	dey
	sta     (sp),y
	lda     #$09
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.left : player.x), player.y, 0x18, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L0021
	lda     _player+3
	jmp     L0022
L0021:	lda     _player
L0022:	ldy     #$02
	sta     (sp),y
	lda     _player+1
	dey
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr((player.facingRight ? player.x : player.left), player.y, 0x19, playerAttributes);
;
	jsr     decsp3
	lda     _player+11
	beq     L0023
	lda     _player
	jmp     L0042
L0023:	lda     _player+3
L0042:	ldy     #$02
	sta     (sp),y
	lda     _player+1
	dey
	sta     (sp),y
	lda     #$19
L004B:	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     _oam_spr
;
; for (i = 0; i < MAX_HEALTH; i++)
;
	lda     #$00
	sta     _i
	sta     _i+1
L0025:	lda     _i
	cmp     #$04
	lda     _i+1
	sbc     #$00
	bvc     L0029
	eor     #$80
L0029:	jpl     L0026
;
; healthBarAttributes = currentLevel == 1 ? 0x01 : 
;
	lda     _currentLevel+1
	bne     L002C
	lda     _currentLevel
	cmp     #$01
	beq     L0044
;
; currentLevel == 2 ? 0x03 : 0x02;
;
L002C:	lda     _currentLevel+1
	bne     L0043
	lda     _currentLevel
	cmp     #$02
	bne     L0043
	lda     #$03
	jmp     L0044
L0043:	lda     #$02
L0044:	ldy     #$01
	sta     (sp),y
;
; if (i <= player.health - 1)
;
	lda     _i
	ldx     _i+1
	jsr     pushax
	lda     _player+23
	ldx     _player+23+1
	sec
	sbc     #$01
	bcs     L0032
	dex
L0032:	jsr     tosicmp
	beq     L003A
	jcs     L0031
;
; oam_spr(origin + (i * offset), 20, 0x0E, healthBarAttributes);
;
L003A:	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(origin + (i * offset), 28, 0x1E, healthBarAttributes);
;
	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     #$1E
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _oam_spr
;
; healthBarAttributes |= 0x40;
;
	ldy     #$01
	lda     (sp),y
	ora     #$40
	sta     (sp),y
;
; oam_spr(origin + (i * offset) + 8, 20, 0x0E, healthBarAttributes);
;
	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(origin + (i * offset) + 8, 28, 0x1E, healthBarAttributes);
;
	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     #$1E
;
; else
;
	jmp     L004C
;
; oam_spr(origin + (i * offset), 20, 0x0F, healthBarAttributes);
;
L0031:	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(origin + (i * offset), 28, 0x1F, healthBarAttributes);
;
	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     #$1F
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _oam_spr
;
; healthBarAttributes |= 0x40;
;
	ldy     #$01
	lda     (sp),y
	ora     #$40
	sta     (sp),y
;
; oam_spr(origin + (i * offset) + 8, 20, 0x0F, healthBarAttributes);
;
	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(origin + (i * offset) + 8, 28, 0x1F, healthBarAttributes);
;
	jsr     decsp3
	ldy     #$08
	jsr     pushwysp
	lda     _i
	ldx     _i+1
	jsr     pushax
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumulax
	jsr     tosaddax
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     #$1F
L004C:	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _oam_spr
;
; for (i = 0; i < MAX_HEALTH; i++)
;
	inc     _i
	jne     L0025
	inc     _i+1
	jmp     L0025
;
; }
;
L0026:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetTileIndex (unsigned char playerX, unsigned char playerY)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetTileIndex: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; unsigned char tileX = playerX / 8; 
;
	ldy     #$01
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char tileY = playerY / 8;
;
	ldy     #$01
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned int tileIndex = tileY * 32 + tileX;
;
	ldx     #$00
	lda     (sp,x)
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     tmp1
	bcc     L0002
	inx
L0002:	jsr     pushax
;
; return tileIndex;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ CheckIfEnd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckIfEnd: near

.segment	"CODE"

;
; if (CheckIfGoalTile(currentLevelData[GetTileIndex(player.left + 4, player.bottom)]) ||
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+3
	clc
	adc     #$04
	jsr     pusha
	lda     _player+9
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfGoalTile
	tax
	bne     L0004
;
; CheckIfGoalTile(currentLevelData[GetTileIndex(player.right - 4, player.bottom)]))
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+5
	sec
	sbc     #$04
	jsr     pusha
	lda     _player+9
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfGoalTile
	tax
	bne     L0004
	rts
;
; SetPlayerValues();
;
L0004:	jsr     _SetPlayerValues
;
; if (currentLevel == 3)
;
	lda     _currentLevel+1
	bne     L0007
	lda     _currentLevel
	cmp     #$03
	bne     L0007
;
; currentGameState = END_SCREEN;
;
	lda     #$02
	sta     _currentGameState
;
; DrawEndScreen();
;
	jmp     _DrawEndScreen
;
; currentLevel++;
;
L0007:	inc     _currentLevel
	bne     L000A
	inc     _currentLevel+1
;
; GameLoop();
;
L000A:	jmp     _GameLoop

.endproc

; ---------------------------------------------------------------
; void __near__ DrawEndScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawEndScreen: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; oam_clear();
;
	jsr     _oam_clear
;
; currentLevel = 1;
;
	ldx     #$00
	lda     #$01
	sta     _currentLevel
	stx     _currentLevel+1
;
; vram_adr(NAMETABLE_A);            // Set VRAM address to start of screen
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0x00, 1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; vram_adr(NTADR_A(8, 8)); // places text at screen position
;
	ldx     #$21
	lda     #$08
	jsr     _vram_adr
;
; vram_write(endScreenTitle, sizeof(endScreenTitle) - 1); //write Title to screen
;
	lda     #<(_endScreenTitle)
	ldx     #>(_endScreenTitle)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _vram_write
;
; vram_adr(NTADR_A(10, 14));
;
	ldx     #$21
	lda     #$CA
	jsr     _vram_adr
;
; vram_write(titlePrompt, sizeof(titlePrompt) - 1);
;
	lda     #<(_titlePrompt)
	ldx     #>(_titlePrompt)
	jsr     pushax
	ldx     #$00
	lda     #$0B
	jsr     _vram_write
;
; vram_adr(NTADR_A(10, 18));
;
	ldx     #$22
	lda     #$4A
	jsr     _vram_adr
;
; vram_write(endScreenPrompt, sizeof(endScreenPrompt) - 1);
;
	lda     #<(_endScreenPrompt)
	ldx     #>(_endScreenPrompt)
	jsr     pushax
	ldx     #$00
	lda     #$0D
	jsr     _vram_write
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; char __near__ OnGround (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_OnGround: near

.segment	"CODE"

;
; return CheckIfCollidableTile(currentLevelData[GetTileIndex(player.right - 6, player.bottom + 1)]) ||
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+5
	sec
	sbc     #$06
	jsr     pusha
	lda     _player+9
	clc
	adc     #$01
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	jne     L0004
;
; CheckIfCollidableTile(currentLevelData[GetTileIndex(player.left + 6, player.bottom + 1)]) ||
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+3
	clc
	adc     #$06
	jsr     pusha
	lda     _player+9
	clc
	adc     #$01
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfCollidableTile
	tax
	bne     L0004
;
; CheckIfPlatformTile(currentLevelData[GetTileIndex(player.right - 6, player.bottom + 1)]) ||
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+5
	sec
	sbc     #$06
	jsr     pusha
	lda     _player+9
	clc
	adc     #$01
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfPlatformTile
	tax
	bne     L0004
;
; CheckIfPlatformTile(currentLevelData[GetTileIndex(player.left + 6, player.bottom + 1)]);
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	lda     _player+3
	clc
	adc     #$06
	jsr     pusha
	lda     _player+9
	clc
	adc     #$01
	jsr     _GetTileIndex
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _CheckIfPlatformTile
	tax
	beq     L000C
L0004:	lda     #$01
	ldx     #$00
;
; }
;
L000C:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ CheckIfCollidableTile (unsigned char tile)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckIfCollidableTile: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; return tile == 0x10 || tile == 0x11 || tile == 0x12 || tile == 0x13
;
	ldy     #$00
	lda     (sp),y
	cmp     #$10
	beq     L0004
	cmp     #$11
	beq     L0004
	cmp     #$12
	beq     L0004
;
; || tile == 0x80 || tile == 0x81 || tile == 0x82 || tile == 0x83 
;
	cmp     #$13
	beq     L0004
	cmp     #$80
	beq     L0004
	cmp     #$81
	beq     L0004
	cmp     #$82
	beq     L0004
;
; || tile == 0x90 || tile == 0x91 || tile == 0x92 || tile == 0x93
;
	cmp     #$83
	beq     L0004
	cmp     #$90
	beq     L0004
	cmp     #$91
	beq     L0004
	cmp     #$92
	beq     L0004
;
; || tile == 0xA0 || tile == 0xA1 || tile == 0xA4 || tile == 0xA5 
;
	cmp     #$93
	beq     L0004
	cmp     #$A0
	beq     L0004
	cmp     #$A1
	beq     L0004
	cmp     #$A4
	beq     L0004
;
; || tile == 0xA6 || tile == 0xA7 || tile == 0xA8 || tile == 0xA9 
;
	cmp     #$A5
	beq     L0004
	cmp     #$A6
	beq     L0004
	cmp     #$A7
	beq     L0004
	cmp     #$A8
	beq     L0004
;
; || tile == 0xB0 || tile == 0xB1 || tile == 0xB4 || tile == 0xB5 
;
	cmp     #$A9
	beq     L0004
	cmp     #$B0
	beq     L0004
	cmp     #$B1
	beq     L0004
	cmp     #$B4
	beq     L0004
;
; || tile == 0xB6 || tile == 0xB7 || tile == 0xB8 || tile == 0xB9;
;
	cmp     #$B5
	beq     L0004
	cmp     #$B6
	beq     L0004
	cmp     #$B7
	beq     L0004
	cmp     #$B8
	beq     L0004
	cmp     #$B9
	beq     L0004
	ldx     #$00
	txa
	jmp     incsp1
L0004:	lda     #$01
	ldx     #$00
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ CheckIfGoalTile (unsigned char tile)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckIfGoalTile: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; return tile == 0x04 || tile == 0x05 || tile == 0x14 || tile == 0x15;
;
	ldy     #$00
	lda     (sp),y
	cmp     #$04
	beq     L0004
	cmp     #$05
	beq     L0004
	cmp     #$14
	beq     L0004
	cmp     #$15
	beq     L0004
	ldx     #$00
	txa
	jmp     incsp1
L0004:	lda     #$01
	ldx     #$00
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ UpdateColliderPositions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateColliderPositions: near

.segment	"CODE"

;
; player.left = player.x - 8;
;
	ldx     #$00
	lda     _player
	sec
	sbc     #$08
	bcs     L0002
	dex
L0002:	sta     _player+3
	stx     _player+3+1
;
; player.right = player.x + 8;
;
	ldx     #$00
	lda     _player
	clc
	adc     #$08
	bcc     L0003
	inx
L0003:	sta     _player+5
	stx     _player+5+1
;
; player.top = player.y - 8;
;
	ldx     #$00
	lda     _player+1
	sec
	sbc     #$08
	bcs     L0004
	dex
L0004:	sta     _player+7
	stx     _player+7+1
;
; player.bottom = player.y + 8;
;
	ldx     #$00
	lda     _player+1
	clc
	adc     #$08
	bcc     L0005
	inx
L0005:	sta     _player+9
	stx     _player+9+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DashEnd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DashEnd: near

.segment	"CODE"

;
; if (player.isDashing)
;
	lda     _player+16
	ora     _player+16+1
	beq     L0002
;
; player.isDashing = 0;
;
	lda     #$00
	sta     _player+16
	sta     _player+16+1
;
; player.dashCooldown = DASH_COOLDOWN;
;
	lda     #$1E
	sta     _player+19
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ CheckIfPlatformTile (unsigned char tile)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckIfPlatformTile: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; return tile == 0x84 || tile == 0x85 || tile == 0x94 || tile == 0x95 ||
;
	ldy     #$00
	lda     (sp),y
	cmp     #$84
	beq     L0004
	cmp     #$85
	beq     L0004
	cmp     #$94
	beq     L0004
	cmp     #$95
	beq     L0004
;
; tile == 0xE4 || tile == 0xE5 || tile == 0xE6 || tile == 0xF4 ||
;
	cmp     #$E4
	beq     L0004
	cmp     #$E5
	beq     L0004
	cmp     #$E6
	beq     L0004
	cmp     #$F4
	beq     L0004
;
; tile == 0xF5 || tile == 0xF6;
;
	cmp     #$F5
	beq     L0004
	cmp     #$F6
	beq     L0004
	ldx     #$00
	txa
	jmp     incsp1
L0004:	lda     #$01
	ldx     #$00
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ SetPlayerValues (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetPlayerValues: near

.segment	"CODE"

;
; player.x = 30;
;
	lda     #$1E
	sta     _player
;
; player.y = 215;
;
	lda     #$D7
	sta     _player+1
;
; player.coyoteTime = 0;
;
	lda     #$00
	sta     _player+2
;
; player.left = 0;
;
	sta     _player+3
	sta     _player+3+1
;
; player.right = 0;
;
	sta     _player+5
	sta     _player+5+1
;
; player.top = 0;
;
	sta     _player+7
	sta     _player+7+1
;
; player.bottom = 0;
;
	sta     _player+9
	sta     _player+9+1
;
; player.facingRight = 1;
;
	lda     #$01
	sta     _player+11
;
; player.velocityY = 0;
;
	lda     #$00
	sta     _player+12
	sta     _player+12+1
;
; player.isJumping = 0;
;
	sta     _player+14
;
; player.jumpBufferTimer = 0; 
;
	sta     _player+15
;
; player.isDashing = 0;
;
	sta     _player+16
	sta     _player+16+1
;
; player.dashTimer = 0;
;
	sta     _player+18
;
; player.dashCooldown = 0;
;
	sta     _player+19
;
; player.hasDashedInAir = 0;
;
	sta     _player+20
;
; player.dashDirection = 0; 
;
	sta     _player+21
	sta     _player+21+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawDeathScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawDeathScreen: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; oam_clear();
;
	jsr     _oam_clear
;
; currentLevel = 1;
;
	ldx     #$00
	lda     #$01
	sta     _currentLevel
	stx     _currentLevel+1
;
; vram_adr(NAMETABLE_A);            // Set VRAM address to start of screen
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0x00, 1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; vram_adr(NTADR_A(8, 8)); // places text at screen position
;
	ldx     #$21
	lda     #$08
	jsr     _vram_adr
;
; vram_write(deathScreenTitle, sizeof(deathScreenTitle) - 1); //write Title to screen
;
	lda     #<(_deathScreenTitle)
	ldx     #>(_deathScreenTitle)
	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     _vram_write
;
; vram_adr(NTADR_A(10, 14));
;
	ldx     #$21
	lda     #$CA
	jsr     _vram_adr
;
; vram_write(titlePrompt, sizeof(titlePrompt) - 1);
;
	lda     #<(_titlePrompt)
	ldx     #>(_titlePrompt)
	jsr     pushax
	ldx     #$00
	lda     #$0B
	jsr     _vram_write
;
; vram_adr(NTADR_A(10, 18));
;
	ldx     #$22
	lda     #$4A
	jsr     _vram_adr
;
; vram_write(endScreenPrompt, sizeof(endScreenPrompt) - 1);
;
	lda     #<(_endScreenPrompt)
	ldx     #>(_endScreenPrompt)
	jsr     pushax
	ldx     #$00
	lda     #$0D
	jsr     _vram_write
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ ResetLevel (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ResetLevel: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; oam_clear();
;
	jsr     _oam_clear
;
; player.health -= 1;
;
	ldx     _player+23
	bne     L0002
	dec     _player+23+1
L0002:	dex
	stx     _player+23
;
; if (player.health <= 0)
;
	lda     _player+23
	ora     _player+23+1
	bne     L0003
;
; SetPlayerValues();
;
	jsr     _SetPlayerValues
;
; currentGameState = DEATH_SCREEN;
;
	lda     #$03
	sta     _currentGameState
;
; DrawDeathScreen();
;
	jsr     _DrawDeathScreen
;
; else
;
	jmp     _ppu_on_all
;
; vram_adr(NAMETABLE_A);      
;
L0003:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0x00, 1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; delay(60);
;
	lda     #$3C
	jsr     _delay
;
; vram_adr(NAMETABLE_A);      
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(currentLevelData, 1024);
;
	lda     _currentLevelData
	ldx     _currentLevelData+1
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; SetPlayerValues();
;
	jsr     _SetPlayerValues
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; SetPlayerValues();
;
	jsr     _SetPlayerValues
;
; DrawTitleScreen();
;
L000E:	jsr     _DrawTitleScreen
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; movementPad = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _movementPad
;
; inputPad = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _inputPad
;
; switch(currentGameState)
;
	lda     _currentGameState
;
; }
;
	beq     L000F
	cmp     #$01
	beq     L0009
	cmp     #$02
	beq     L0010
	cmp     #$03
	beq     L0011
	jmp     L0002
;
; if (inputPad & PAD_START)
;
L000F:	lda     _inputPad
	and     #$10
	beq     L0002
;
; currentGameState = GAME_LOOP;
;
	lda     #$01
	sta     _currentGameState
;
; GameLoop();
;
	jsr     _GameLoop
;
; break;
;
	jmp     L0002
;
; UpdateColliderPositions();
;
L0009:	jsr     _UpdateColliderPositions
;
; MovePlayer();
;
	jsr     _MovePlayer
;
; DrawPlayer();
;
	jsr     _DrawPlayer
;
; CheckIfEnd();
;
	jsr     _CheckIfEnd
;
; break;
;
	jmp     L0002
;
; if (inputPad & PAD_START)
;
L0010:	lda     _inputPad
	and     #$10
	beq     L0002
;
; currentGameState = START_SCREEN;
;
	lda     #$00
	sta     _currentGameState
;
; break;
;
	jmp     L000E
;
; if (inputPad & PAD_START)
;
L0011:	lda     _inputPad
	and     #$10
	beq     L0002
;
; currentGameState = START_SCREEN;
;
	lda     #$00
	sta     _currentGameState
;
; break;
;
	jmp     L000E

.endproc

